# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic input`.
# To validate test cases using the specified validator
# for a subtask, use `ocimatic validate-input`.


[Subtask 1 - validators/st1.cpp]
  # Manual test cases
  1 ; copy attic/manual/st1/black-king-knight-1.in
  1 ; copy attic/manual/st1/black-king-knight-2.in
  1 ; copy attic/manual/st1/black-king-knight-3.in
  1 ; copy attic/manual/st1/black-king-pawns-edge.in
  1 ; copy attic/manual/st1/white-king-black-knights-1.in
  1 ; copy attic/manual/st1/white-king-black-knights-2.in
  1 ; copy attic/manual/st1/white-king-black-knights-3.in
  1 ; copy attic/manual/st1/white-king-black-knights-4.in
  1 ; copy attic/manual/st1/white-king-black-knights-5.in
  1 ; copy attic/manual/st1/white-king-black-knights-6.in
  1 ; copy attic/manual/st1/white-king-black-knights-7.in
  1 ; copy attic/manual/st1/white-king-black-knights-8.in
  1 ; copy attic/manual/st1/white-king-black-pawns-1.in
  1 ; copy attic/manual/st1/white-king-black-pawns-2.in

  # Use sample data as test
  2 ; copy statement/sample-1.in

  # Generated -- <caso> <piezas atacando> <extra blancas> <extra negras> <jaque>
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1

  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1
  3 ; generator.py 1 0 0 0 1

  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1
  3 ; generator.py 1 0 0 1 1

  3 ; generator.py 1 0 0 2 1
  3 ; generator.py 1 0 0 2 1
  3 ; generator.py 1 0 0 2 1

  3 ; generator.py 1 0 0 3 0
  3 ; generator.py 1 0 0 3 0
  3 ; generator.py 1 0 0 3 0
  3 ; generator.py 1 0 0 3 0
  3 ; generator.py 1 0 0 3 0
  3 ; generator.py 1 0 0 3 0

  3 ; generator.py 1 0 0 2 0
  3 ; generator.py 1 0 0 2 0
  3 ; generator.py 1 0 0 2 0
  3 ; generator.py 1 0 0 2 0

  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0
  3 ; generator.py 1 0 0 1 0


[Subtask 2 - validators/st2.cpp]
  # Manual test cases

  # Generated -- <caso> <piezas atacando> <extra blancas> <extra negras> <jaque>
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1
  2 ; generator.py 2 2 1 0 1

  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1
  2 ; generator.py 2 2 0 0 1

  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1
  2 ; generator.py 2 2 2 1 1

  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1
  2 ; generator.py 2 2 4 0 1

  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1
  2 ; generator.py 2 4 3 3 1

  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1
  2 ; generator.py 2 3 0 1 1

  2 ; generator.py 2 5 4 4 0
  2 ; generator.py 2 5 4 4 0

[Subtask 3 - validators/st3.cpp]
  # Manual test cases
  1 ; copy attic/manual/st3/mate-bishops-only-1.in
  1 ; copy attic/manual/st3/mate-bishops-only-2.in
  1 ; copy attic/manual/st3/mate-bishops-only-3.in
  1 ; copy attic/manual/st3/mate-bishops-only-4.in
  1 ; copy attic/manual/st3/mate-queens-only-1.in
  1 ; copy attic/manual/st3/mate-queens-only-2.in
  1 ; copy attic/manual/st3/mate-queens-only-3.in
  1 ; copy attic/manual/st3/mate-queens-only-4.in
  1 ; copy attic/manual/st3/mate-rooks-only-1.in
  1 ; copy attic/manual/st3/mate-rooks-only-2.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-1.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-2.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-3.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-4.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-5.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-6.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-7.in
  1 ; copy attic/manual/st3/not-mate-rooks-only-8.in
  1 ; copy attic/manual/st3/smothered-mate.in
  1 ; copy attic/manual/st3/failed-smothered-mate.in
  1 ; copy attic/manual/st3/fools-mate.in
  1 ; copy attic/manual/st3/mate-pawn-cannot-move-diagonally.in
  1 ; copy attic/manual/st3/mate-pinned-blocker-piece.in
  1 ; copy attic/manual/st3/mate-pinned-capture-piece.in
  1 ; copy attic/manual/st3/not-mate-not-pinned-blocker-piece.in
  1 ; copy attic/manual/st3/not-mate-not-pinned-capture-piece.in
  1 ; copy attic/manual/st3/not-mate-pawn-stops-check-by-advancing.in
  1 ; copy attic/manual/st3/not-mate-pawn-stops-check-by-capturing.in

  # Use sample data as test
  2 ; copy statement/sample-2.in

  # Generated -- <caso> <piezas atacando> <extra blancas> <extra negras> <jaque>
  3 ; generator.py 3 1 0 2 1
  3 ; generator.py 3 1 1 2 1
  3 ; generator.py 3 1 2 0 1
  3 ; generator.py 3 1 0 3 1
  3 ; generator.py 3 1 1 3 1
  3 ; generator.py 3 1 2 0 1
  3 ; generator.py 3 1 0 2 1
  3 ; generator.py 3 1 1 2 1
  3 ; generator.py 3 1 2 0 1
  3 ; generator.py 3 1 0 4 1
  3 ; generator.py 3 1 1 4 1
  3 ; generator.py 3 1 2 0 1
  3 ; generator.py 3 1 0 0 1

  3 ; generator.py 3 2 0 2 1
  3 ; generator.py 3 2 1 2 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 2 0 3 1
  3 ; generator.py 3 2 1 3 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 2 0 2 1
  3 ; generator.py 3 2 1 2 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 2 0 4 1
  3 ; generator.py 3 2 1 4 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 4 0 0 1
  3 ; generator.py 3 3 0 3 1
  3 ; generator.py 3 3 3 3 1
  3 ; generator.py 3 3 0 0 1
  3 ; generator.py 3 3 3 0 1

  3 ; generator.py 3 2 0 2 1
  3 ; generator.py 3 2 1 2 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 2 0 3 1
  3 ; generator.py 3 2 1 3 1
  3 ; generator.py 3 2 2 0 1
  3 ; generator.py 3 2 0 2 1
  3 ; generator.py 3 2 1 2 1
