# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1]
  # Manual test cases
  1 ; copy attic/manual/st1/mate-knights-only-1.in
  1 ; copy attic/manual/st1/mate-knights-only-2.in
  1 ; copy attic/manual/st1/mate-queens-only-1.in
  1 ; copy attic/manual/st1/mate-queens-only-2.in
  1 ; copy attic/manual/st1/not-mate-knights-only-1.in
  1 ; copy attic/manual/st1/not-mate-knights-only-2.in
  1 ; copy attic/manual/st1/not-mate-knights-only-3.in
  1 ; copy attic/manual/st1/not-mate-knights-only-4.in

  # Use sample data as test
  2 ; copy statement/sample-1.in
  2 ; copy statement/sample-2.in


[Subtask 2]
  # Manual test cases
  2 ; copy attic/manual/st2/mate-blocked-king.in
  2 ; copy attic/manual/st2/not-mate-blocked-king.in


[Subtask 3]
  # Manual test cases
  1 ; copy attic/manual/st3/pawn-cannot-move-diagonally.in

  # More random tests
  #2 ; random.py 1 1000

