# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1]
  custom ; copy attic/custom/test1.in
  custom ; copy attic/custom/test2.in
  custom ; copy attic/custom/test3.in
  small ; generator.py small 2 100
  small ; generator.py small 2 100
  big ; generator.py big 2 100
  big ; generator.py big 2 100
  small_big ; generator.py small_big 2 100
  small_big ; generator.py small_big 2 100
  small_big ; generator.py small_big 2 100
  small_big ; generator.py small_big 2 100
  tight ; generator.py tight 2 100
  tight ; generator.py tight 2 100
  tight ; generator.py tight 2 100
  tight ; generator.py tight 2 100
  spread ; generator.py spread 2 100
  spread ; generator.py spread 2 100
  spread ; generator.py spread 2 100
  spread ; generator.py spread 2 100

[Subtask 2]
  custom ; copy attic/custom/test4.in
  custom ; copy attic/custom/test5.in
  custom ; copy attic/custom/test6.in
  small ; generator.py small 100 1000
  small ; generator.py small 100 1000
  big ; generator.py big 1000 500
  big ; generator.py big 1000 500
  small_big ; generator.py small_big 100 500
  small_big ; generator.py small_big 100 500
  small_big ; generator.py small_big 100 500
  small_big ; generator.py small_big 100 500
  tight ; generator.py tight 50 1000
  tight ; generator.py tight 50 1000
  tight ; generator.py tight 50 1000
  tight ; generator.py tight 50 1000
  tight ; generator.py tight 50 1000
  spread ; generator.py spread 1000 1000
  spread ; generator.py spread 1000 1000

[Subtask 3]
  custom ; copy attic/custom/test4.in
  custom ; copy attic/custom/test5.in
  custom ; copy attic/custom/test6.in
  small ; generator.py small 100000 1000000000
  small ; generator.py small 100000 1000000000
  big ; generator.py big 100000 5000
  big ; generator.py big 100000 5000
  small_big ; generator.py small_big 100000 5000
  small_big ; generator.py small_big 100000 5000
  small_big ; generator.py small_big 100000 5000
  small_big ; generator.py small_big 100000 5000
  tight ; generator.py tight 100000 1000000000
  tight ; generator.py tight 100000 1000000000
  tight ; generator.py tight 100000 1000000000
  tight ; generator.py tight 100000 1000000000
  spread ; generator.py spread 100000 1000000000
  spread ; generator.py spread 100000 1000000000
