# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic input`.
# To validate test cases using the specified validator
# for a subtask, use `ocimatic validate-input`.


[Subtask 1 - validators/st1.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in
  1 ; copy statement/sample-3.in

  # Random tests -- <N> <PERMUTATIONNESS>
  2 ; generator.py 2 1
  2 ; generator.py 3 1
  2 ; generator.py 4 1
  2 ; generator.py 6 1
  2 ; generator.py 8 1
  2 ; generator.py 10 1
  2 ; generator.py 50 1
  2 ; generator.py 500 1
  2 ; generator.py 999 1
  2 ; generator.py 999 .8
  2 ; generator.py 999 .6
  2 ; generator.py 999 .4
  2 ; generator.py 999 .2
  2 ; generator.py 999 0


[Subtask 2 - validators/st2.cpp]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in
  1 ; copy statement/sample-3.in

  # Random tests -- <N> <PERMUTATIONNESS>
  2 ; generator.py 2 1
  2 ; generator.py 3 1
  2 ; generator.py 4 1
  2 ; generator.py 6 1
  2 ; generator.py 8 1
  2 ; generator.py 10 1
  2 ; generator.py 50 1
  2 ; generator.py 500 1
  2 ; generator.py 5000 1
  2 ; generator.py 50000 1
  2 ; generator.py 500000 1
  2 ; generator.py 1000000 1
  2 ; generator.py 1000000 .1
  2 ; generator.py 1000000 .02
  2 ; generator.py 1000000 .004
  2 ; generator.py 1000000 .0008
  2 ; generator.py 1000000 0

