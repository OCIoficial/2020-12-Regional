# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - validator.cpp]
  invalid_too_high ; generator.py "invalid_too_high" 1 1
  invalid_too_high ; generator.py "invalid_too_high" 1 0
  invalid_too_high ; generator.py "invalid_too_high" 10 10
  invalid_too_high ; generator.py "invalid_too_high" 50 0
  invalid_too_high ; generator.py "invalid_too_high" 100 100

  invalid_more_than_m; generator.py "invalid_more_than_m" 1 0
  invalid_more_than_m; generator.py "invalid_more_than_m" 10 1
  invalid_more_than_m; generator.py "invalid_more_than_m" 50 2
  invalid_more_than_m; generator.py "invalid_more_than_m" 80 10
  invalid_more_than_m; generator.py "invalid_more_than_m" 100 10

  valid_random; generator.py "valid_random" 1 1
  valid_random; generator.py "valid_random" 10 10
  valid_random; generator.py "valid_random" 40 10
  valid_random; generator.py "valid_random" 100 10
  valid_random; generator.py "valid_random" 100 1

  valid_identical; generator.py "valid_identical" 1 0
  valid_identical; generator.py "valid_identical" 1 1
  valid_identical; generator.py "valid_identical" 10 4
  valid_identical; generator.py "valid_identical" 40 10
  valid_identical; generator.py "valid_identical" 100 10
